set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set nu
set autoindent  "vim使用自动对起，也就是把当前行的对起格式应用到下一行；
"set smartindent "依据上面的对起格式，智能的选择对起方式，对于类似C语言编 
if has("syntax")
	syntax on
endif
set nocompatible
set backspace=indent,eol,start
colorscheme ron
set autowrite
set mouse=a
set history=50 
set ruler 
set showcmd 
set showmode
set hlsearch    "高亮显示所有匹配 
set autowrite    "有改动时自动写回文件


"-------------------------让vim记忆上次编辑编辑的位置----
autocmd BufReadPost *
	\ if line("'\"")>0&&line("'\"")<=line("$") |
	\ exe "normal g'\"" |
	\ endif


"-------------------------coding-------------------------
set fileencoding=utf-8
set fileencodings=utf-8,gbk,cp936
set termencoding=utf-8,gb18030,gb2312,gbk
set encoding=utf-8


"-------------------------ctags--------------------------
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" 按下F5重新生成tag文件，并更新taglist
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=/home/yxf/.vim/tags
set tags=tags
set tags+=./tags "add current directory's generated tags file
"set tags+=~/arm/linux-2.6.24.7/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)


"-------------------------taglist------------------------
"-- Taglist setting --
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Use_Right_Window=0 "让窗口显示在右边，0的话就是显示在左边
let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
"let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
"是否一直处理tags.1:处理;0:不处理
let Tlist_Process_File_Always=1 "实时更新tags
let Tlist_Inc_Winwidth=0
let Tlist_Auto_Open = 0
let Tlist_Exit_OnlyWindow=1 "如果taglist窗口是最后一个窗口，则退出vim
"let Tlist_WinHeight = 100
"let Tlist_WinWidth = 40

"-------------------------cscope------------------------------



"------------------------- WinManager setting ---------------------------
" 设置winmanager
" 设置界面分割,设置我们要管理的插件
let g:winManagerWindowLayout = "NERDTree|TagList"
"设置winmanager的宽度，默认为25
let g:winManagerWidth = 30
"定义打开关闭winmanager快捷键为F8
nmap <silent> <F8> :WMToggle<cr>
"在进入vim时自动打开winmanager
let g:persistentBehaviour=0 " 如果所有编辑文件都关闭了，退出vim
let g:AutoOpenWinManager = 1 "在进入vim时自动打开winmanager
let g:winManagerOnRightSide = 1


"-------------------------vundle--------------------------
filetype off                   " required!       /**  从这行开始，vimrc配置 **/

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'
" My Bundles here:  /* 插件配置格式 */
"   
" original repos on github （github网站上非vim-scripts仓库的插件，按下面格式填写）
"bundle 'tpope/vim-fugitive'
"bundle 'lokaltog/vim-easymotion'
"bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"bundle 'tpope/vim-rails.git'
" vim-scripts repos  （vim-scripts仓库里的，按下面格式填写）
"bundle 'l9'
"bundle 'FuzzyFinder'
" non github repos   (非上面两种情况的，按下面格式填写)
"bundle 'git://git.wincent.com/command-t.git'
" ...
"filetype plugin indent on     " required
"------------------------------------------------------> YouCompleteMe
Bundle 'Valloric/YouCompleteMe'
Bundle 'Valloric/ListToggle'
Bundle 'scrooloose/syntastic'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py '
"下面这句话是决定补全时用什么按键
let g:ycm_key_list_select_completion = ['<Down>'] 
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F9> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
let g:ycm_confirm_extra_conf=0    "打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_collect_identifiers_from_tag_files = 1 "使用ctags生成的tags文件
"------------------------------------------------------> Vim Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1		"禁用了vim-markdown的自动折叠
"------------------------------------------------------> Vim Shell
Plugin 'Shougo/vimshell.vim'
"------------------------------------------------------> NERDTree
Bundle 'scrooloose/nerdtree'
" 设置NerdTree
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
let g:NERDTree_title = "[NERDTree]"
function! NERDTree_Start() 
	exe 'NERDTree'
endfunction
function! NERDTree_IsValid() 
	return 1
endfunction
"autocmd VimEnter * NERDTree
"wincmd w
"autocmd VimEnter * wincmd w

filetype plugin indent on     " required!   /** vimrc文件配置结束 **/
"                                           /** vundle命令 **/
" brief help
" :bundlelist          - list configured bundles
" :bundleinstall(!)    - install(update) bundles
":bundlesearch(!) foo - search(or refresh cache first) for foo 
" :bundleclean(!)      - confirm(or auto-approve) removal of unused bundles
"   
" see :h vundle for more details or wiki for faq 
" NOTE: comments after Bundle command are not allowed..
